/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as OrgsIndexImport } from './routes/orgs/index'
import { Route as OrgsSlugRouteImport } from './routes/orgs/$slug/route'
import { Route as OrgsSlugIndexImport } from './routes/orgs/$slug/index'
import { Route as OrgsSlugLandingImport } from './routes/orgs/$slug/landing'
import { Route as OrgsSlugTablesIndexImport } from './routes/orgs/$slug/tables/index'
import { Route as OrgsSlugQueryIndexImport } from './routes/orgs/$slug/query/index'
import { Route as OrgsSlugFormsIndexImport } from './routes/orgs/$slug/forms/index'
import { Route as OrgsSlugQueryParseImport } from './routes/orgs/$slug/query/parse'
import { Route as OrgsSlugQueryInfiniteImport } from './routes/orgs/$slug/query/infinite'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const OrgsIndexRoute = OrgsIndexImport.update({
  id: '/orgs/',
  path: '/orgs/',
  getParentRoute: () => rootRoute,
} as any)

const OrgsSlugRouteRoute = OrgsSlugRouteImport.update({
  id: '/orgs/$slug',
  path: '/orgs/$slug',
  getParentRoute: () => rootRoute,
} as any)

const OrgsSlugIndexRoute = OrgsSlugIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => OrgsSlugRouteRoute,
} as any)

const OrgsSlugLandingRoute = OrgsSlugLandingImport.update({
  id: '/landing',
  path: '/landing',
  getParentRoute: () => OrgsSlugRouteRoute,
} as any)

const OrgsSlugTablesIndexRoute = OrgsSlugTablesIndexImport.update({
  id: '/tables/',
  path: '/tables/',
  getParentRoute: () => OrgsSlugRouteRoute,
} as any)

const OrgsSlugQueryIndexRoute = OrgsSlugQueryIndexImport.update({
  id: '/query/',
  path: '/query/',
  getParentRoute: () => OrgsSlugRouteRoute,
} as any)

const OrgsSlugFormsIndexRoute = OrgsSlugFormsIndexImport.update({
  id: '/forms/',
  path: '/forms/',
  getParentRoute: () => OrgsSlugRouteRoute,
} as any)

const OrgsSlugQueryParseRoute = OrgsSlugQueryParseImport.update({
  id: '/query/parse',
  path: '/query/parse',
  getParentRoute: () => OrgsSlugRouteRoute,
} as any)

const OrgsSlugQueryInfiniteRoute = OrgsSlugQueryInfiniteImport.update({
  id: '/query/infinite',
  path: '/query/infinite',
  getParentRoute: () => OrgsSlugRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/orgs/$slug': {
      id: '/orgs/$slug'
      path: '/orgs/$slug'
      fullPath: '/orgs/$slug'
      preLoaderRoute: typeof OrgsSlugRouteImport
      parentRoute: typeof rootRoute
    }
    '/orgs/': {
      id: '/orgs/'
      path: '/orgs'
      fullPath: '/orgs'
      preLoaderRoute: typeof OrgsIndexImport
      parentRoute: typeof rootRoute
    }
    '/orgs/$slug/landing': {
      id: '/orgs/$slug/landing'
      path: '/landing'
      fullPath: '/orgs/$slug/landing'
      preLoaderRoute: typeof OrgsSlugLandingImport
      parentRoute: typeof OrgsSlugRouteImport
    }
    '/orgs/$slug/': {
      id: '/orgs/$slug/'
      path: '/'
      fullPath: '/orgs/$slug/'
      preLoaderRoute: typeof OrgsSlugIndexImport
      parentRoute: typeof OrgsSlugRouteImport
    }
    '/orgs/$slug/query/infinite': {
      id: '/orgs/$slug/query/infinite'
      path: '/query/infinite'
      fullPath: '/orgs/$slug/query/infinite'
      preLoaderRoute: typeof OrgsSlugQueryInfiniteImport
      parentRoute: typeof OrgsSlugRouteImport
    }
    '/orgs/$slug/query/parse': {
      id: '/orgs/$slug/query/parse'
      path: '/query/parse'
      fullPath: '/orgs/$slug/query/parse'
      preLoaderRoute: typeof OrgsSlugQueryParseImport
      parentRoute: typeof OrgsSlugRouteImport
    }
    '/orgs/$slug/forms/': {
      id: '/orgs/$slug/forms/'
      path: '/forms'
      fullPath: '/orgs/$slug/forms'
      preLoaderRoute: typeof OrgsSlugFormsIndexImport
      parentRoute: typeof OrgsSlugRouteImport
    }
    '/orgs/$slug/query/': {
      id: '/orgs/$slug/query/'
      path: '/query'
      fullPath: '/orgs/$slug/query'
      preLoaderRoute: typeof OrgsSlugQueryIndexImport
      parentRoute: typeof OrgsSlugRouteImport
    }
    '/orgs/$slug/tables/': {
      id: '/orgs/$slug/tables/'
      path: '/tables'
      fullPath: '/orgs/$slug/tables'
      preLoaderRoute: typeof OrgsSlugTablesIndexImport
      parentRoute: typeof OrgsSlugRouteImport
    }
  }
}

// Create and export the route tree

interface OrgsSlugRouteRouteChildren {
  OrgsSlugLandingRoute: typeof OrgsSlugLandingRoute
  OrgsSlugIndexRoute: typeof OrgsSlugIndexRoute
  OrgsSlugQueryInfiniteRoute: typeof OrgsSlugQueryInfiniteRoute
  OrgsSlugQueryParseRoute: typeof OrgsSlugQueryParseRoute
  OrgsSlugFormsIndexRoute: typeof OrgsSlugFormsIndexRoute
  OrgsSlugQueryIndexRoute: typeof OrgsSlugQueryIndexRoute
  OrgsSlugTablesIndexRoute: typeof OrgsSlugTablesIndexRoute
}

const OrgsSlugRouteRouteChildren: OrgsSlugRouteRouteChildren = {
  OrgsSlugLandingRoute: OrgsSlugLandingRoute,
  OrgsSlugIndexRoute: OrgsSlugIndexRoute,
  OrgsSlugQueryInfiniteRoute: OrgsSlugQueryInfiniteRoute,
  OrgsSlugQueryParseRoute: OrgsSlugQueryParseRoute,
  OrgsSlugFormsIndexRoute: OrgsSlugFormsIndexRoute,
  OrgsSlugQueryIndexRoute: OrgsSlugQueryIndexRoute,
  OrgsSlugTablesIndexRoute: OrgsSlugTablesIndexRoute,
}

const OrgsSlugRouteRouteWithChildren = OrgsSlugRouteRoute._addFileChildren(
  OrgsSlugRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/orgs/$slug': typeof OrgsSlugRouteRouteWithChildren
  '/orgs': typeof OrgsIndexRoute
  '/orgs/$slug/landing': typeof OrgsSlugLandingRoute
  '/orgs/$slug/': typeof OrgsSlugIndexRoute
  '/orgs/$slug/query/infinite': typeof OrgsSlugQueryInfiniteRoute
  '/orgs/$slug/query/parse': typeof OrgsSlugQueryParseRoute
  '/orgs/$slug/forms': typeof OrgsSlugFormsIndexRoute
  '/orgs/$slug/query': typeof OrgsSlugQueryIndexRoute
  '/orgs/$slug/tables': typeof OrgsSlugTablesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/orgs': typeof OrgsIndexRoute
  '/orgs/$slug/landing': typeof OrgsSlugLandingRoute
  '/orgs/$slug': typeof OrgsSlugIndexRoute
  '/orgs/$slug/query/infinite': typeof OrgsSlugQueryInfiniteRoute
  '/orgs/$slug/query/parse': typeof OrgsSlugQueryParseRoute
  '/orgs/$slug/forms': typeof OrgsSlugFormsIndexRoute
  '/orgs/$slug/query': typeof OrgsSlugQueryIndexRoute
  '/orgs/$slug/tables': typeof OrgsSlugTablesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/orgs/$slug': typeof OrgsSlugRouteRouteWithChildren
  '/orgs/': typeof OrgsIndexRoute
  '/orgs/$slug/landing': typeof OrgsSlugLandingRoute
  '/orgs/$slug/': typeof OrgsSlugIndexRoute
  '/orgs/$slug/query/infinite': typeof OrgsSlugQueryInfiniteRoute
  '/orgs/$slug/query/parse': typeof OrgsSlugQueryParseRoute
  '/orgs/$slug/forms/': typeof OrgsSlugFormsIndexRoute
  '/orgs/$slug/query/': typeof OrgsSlugQueryIndexRoute
  '/orgs/$slug/tables/': typeof OrgsSlugTablesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/orgs/$slug'
    | '/orgs'
    | '/orgs/$slug/landing'
    | '/orgs/$slug/'
    | '/orgs/$slug/query/infinite'
    | '/orgs/$slug/query/parse'
    | '/orgs/$slug/forms'
    | '/orgs/$slug/query'
    | '/orgs/$slug/tables'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/orgs'
    | '/orgs/$slug/landing'
    | '/orgs/$slug'
    | '/orgs/$slug/query/infinite'
    | '/orgs/$slug/query/parse'
    | '/orgs/$slug/forms'
    | '/orgs/$slug/query'
    | '/orgs/$slug/tables'
  id:
    | '__root__'
    | '/'
    | '/orgs/$slug'
    | '/orgs/'
    | '/orgs/$slug/landing'
    | '/orgs/$slug/'
    | '/orgs/$slug/query/infinite'
    | '/orgs/$slug/query/parse'
    | '/orgs/$slug/forms/'
    | '/orgs/$slug/query/'
    | '/orgs/$slug/tables/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OrgsSlugRouteRoute: typeof OrgsSlugRouteRouteWithChildren
  OrgsIndexRoute: typeof OrgsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OrgsSlugRouteRoute: OrgsSlugRouteRouteWithChildren,
  OrgsIndexRoute: OrgsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/orgs/$slug",
        "/orgs/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/orgs/$slug": {
      "filePath": "orgs/$slug/route.tsx",
      "children": [
        "/orgs/$slug/landing",
        "/orgs/$slug/",
        "/orgs/$slug/query/infinite",
        "/orgs/$slug/query/parse",
        "/orgs/$slug/forms/",
        "/orgs/$slug/query/",
        "/orgs/$slug/tables/"
      ]
    },
    "/orgs/": {
      "filePath": "orgs/index.tsx"
    },
    "/orgs/$slug/landing": {
      "filePath": "orgs/$slug/landing.tsx",
      "parent": "/orgs/$slug"
    },
    "/orgs/$slug/": {
      "filePath": "orgs/$slug/index.tsx",
      "parent": "/orgs/$slug"
    },
    "/orgs/$slug/query/infinite": {
      "filePath": "orgs/$slug/query/infinite.tsx",
      "parent": "/orgs/$slug"
    },
    "/orgs/$slug/query/parse": {
      "filePath": "orgs/$slug/query/parse.tsx",
      "parent": "/orgs/$slug"
    },
    "/orgs/$slug/forms/": {
      "filePath": "orgs/$slug/forms/index.tsx",
      "parent": "/orgs/$slug"
    },
    "/orgs/$slug/query/": {
      "filePath": "orgs/$slug/query/index.tsx",
      "parent": "/orgs/$slug"
    },
    "/orgs/$slug/tables/": {
      "filePath": "orgs/$slug/tables/index.tsx",
      "parent": "/orgs/$slug"
    }
  }
}
ROUTE_MANIFEST_END */
