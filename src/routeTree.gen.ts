/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SplatImport } from './routes/$'
import { Route as PathlessGroupRouteImport } from './routes/_pathlessGroup/route'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as SettingsThemeImport } from './routes/settings/theme'
import { Route as PathlessGroupSampleImport } from './routes/_pathlessGroup/sample'
import { Route as pathlessLayoutDemosPathlessLayoutImport } from './routes/(pathlessLayoutDemos)/_pathlessLayout'
import { Route as dynamicDemosDynamicRouteImport } from './routes/(dynamicDemos)/dynamic/route'
import { Route as dynamicDemosDynamicIndexImport } from './routes/(dynamicDemos)/dynamic/index'
import { Route as pathlessLayoutDemosPathlessLayoutAboutImport } from './routes/(pathlessLayoutDemos)/_pathlessLayout.about'
import { Route as dynamicDemosDynamicUnnestImport } from './routes/(dynamicDemos)/dynamic_.unnest'
import { Route as dynamicDemosDynamicIdImport } from './routes/(dynamicDemos)/dynamic/$id'

// Create Virtual Routes

const pathlessLayoutDemosImport = createFileRoute('/(pathlessLayoutDemos)')()

// Create/Update Routes

const pathlessLayoutDemosRoute = pathlessLayoutDemosImport.update({
  id: '/(pathlessLayoutDemos)',
  getParentRoute: () => rootRoute,
} as any)

const SplatRoute = SplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRoute,
} as any)

const PathlessGroupRouteRoute = PathlessGroupRouteImport.update({
  id: '/_pathlessGroup',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsThemeRoute = SettingsThemeImport.update({
  id: '/settings/theme',
  path: '/settings/theme',
  getParentRoute: () => rootRoute,
} as any)

const PathlessGroupSampleRoute = PathlessGroupSampleImport.update({
  id: '/sample',
  path: '/sample',
  getParentRoute: () => PathlessGroupRouteRoute,
} as any)

const pathlessLayoutDemosPathlessLayoutRoute =
  pathlessLayoutDemosPathlessLayoutImport.update({
    id: '/_pathlessLayout',
    getParentRoute: () => pathlessLayoutDemosRoute,
  } as any)

const dynamicDemosDynamicRouteRoute = dynamicDemosDynamicRouteImport.update({
  id: '/(dynamicDemos)/dynamic',
  path: '/dynamic',
  getParentRoute: () => rootRoute,
} as any)

const dynamicDemosDynamicIndexRoute = dynamicDemosDynamicIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => dynamicDemosDynamicRouteRoute,
} as any)

const pathlessLayoutDemosPathlessLayoutAboutRoute =
  pathlessLayoutDemosPathlessLayoutAboutImport.update({
    id: '/about',
    path: '/about',
    getParentRoute: () => pathlessLayoutDemosPathlessLayoutRoute,
  } as any)

const dynamicDemosDynamicUnnestRoute = dynamicDemosDynamicUnnestImport.update({
  id: '/(dynamicDemos)/dynamic_/unnest',
  path: '/dynamic/unnest',
  getParentRoute: () => rootRoute,
} as any)

const dynamicDemosDynamicIdRoute = dynamicDemosDynamicIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => dynamicDemosDynamicRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessGroup': {
      id: '/_pathlessGroup'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessGroupRouteImport
      parentRoute: typeof rootRoute
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatImport
      parentRoute: typeof rootRoute
    }
    '/(dynamicDemos)/dynamic': {
      id: '/(dynamicDemos)/dynamic'
      path: '/dynamic'
      fullPath: '/dynamic'
      preLoaderRoute: typeof dynamicDemosDynamicRouteImport
      parentRoute: typeof rootRoute
    }
    '/(pathlessLayoutDemos)': {
      id: '/(pathlessLayoutDemos)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof pathlessLayoutDemosImport
      parentRoute: typeof rootRoute
    }
    '/(pathlessLayoutDemos)/_pathlessLayout': {
      id: '/(pathlessLayoutDemos)/_pathlessLayout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof pathlessLayoutDemosPathlessLayoutImport
      parentRoute: typeof pathlessLayoutDemosRoute
    }
    '/_pathlessGroup/sample': {
      id: '/_pathlessGroup/sample'
      path: '/sample'
      fullPath: '/sample'
      preLoaderRoute: typeof PathlessGroupSampleImport
      parentRoute: typeof PathlessGroupRouteImport
    }
    '/settings/theme': {
      id: '/settings/theme'
      path: '/settings/theme'
      fullPath: '/settings/theme'
      preLoaderRoute: typeof SettingsThemeImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/(dynamicDemos)/dynamic/$id': {
      id: '/(dynamicDemos)/dynamic/$id'
      path: '/$id'
      fullPath: '/dynamic/$id'
      preLoaderRoute: typeof dynamicDemosDynamicIdImport
      parentRoute: typeof dynamicDemosDynamicRouteImport
    }
    '/(dynamicDemos)/dynamic_/unnest': {
      id: '/(dynamicDemos)/dynamic_/unnest'
      path: '/dynamic/unnest'
      fullPath: '/dynamic/unnest'
      preLoaderRoute: typeof dynamicDemosDynamicUnnestImport
      parentRoute: typeof rootRoute
    }
    '/(pathlessLayoutDemos)/_pathlessLayout/about': {
      id: '/(pathlessLayoutDemos)/_pathlessLayout/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof pathlessLayoutDemosPathlessLayoutAboutImport
      parentRoute: typeof pathlessLayoutDemosPathlessLayoutImport
    }
    '/(dynamicDemos)/dynamic/': {
      id: '/(dynamicDemos)/dynamic/'
      path: '/'
      fullPath: '/dynamic/'
      preLoaderRoute: typeof dynamicDemosDynamicIndexImport
      parentRoute: typeof dynamicDemosDynamicRouteImport
    }
  }
}

// Create and export the route tree

interface PathlessGroupRouteRouteChildren {
  PathlessGroupSampleRoute: typeof PathlessGroupSampleRoute
}

const PathlessGroupRouteRouteChildren: PathlessGroupRouteRouteChildren = {
  PathlessGroupSampleRoute: PathlessGroupSampleRoute,
}

const PathlessGroupRouteRouteWithChildren =
  PathlessGroupRouteRoute._addFileChildren(PathlessGroupRouteRouteChildren)

interface dynamicDemosDynamicRouteRouteChildren {
  dynamicDemosDynamicIdRoute: typeof dynamicDemosDynamicIdRoute
  dynamicDemosDynamicIndexRoute: typeof dynamicDemosDynamicIndexRoute
}

const dynamicDemosDynamicRouteRouteChildren: dynamicDemosDynamicRouteRouteChildren =
  {
    dynamicDemosDynamicIdRoute: dynamicDemosDynamicIdRoute,
    dynamicDemosDynamicIndexRoute: dynamicDemosDynamicIndexRoute,
  }

const dynamicDemosDynamicRouteRouteWithChildren =
  dynamicDemosDynamicRouteRoute._addFileChildren(
    dynamicDemosDynamicRouteRouteChildren,
  )

interface pathlessLayoutDemosPathlessLayoutRouteChildren {
  pathlessLayoutDemosPathlessLayoutAboutRoute: typeof pathlessLayoutDemosPathlessLayoutAboutRoute
}

const pathlessLayoutDemosPathlessLayoutRouteChildren: pathlessLayoutDemosPathlessLayoutRouteChildren =
  {
    pathlessLayoutDemosPathlessLayoutAboutRoute:
      pathlessLayoutDemosPathlessLayoutAboutRoute,
  }

const pathlessLayoutDemosPathlessLayoutRouteWithChildren =
  pathlessLayoutDemosPathlessLayoutRoute._addFileChildren(
    pathlessLayoutDemosPathlessLayoutRouteChildren,
  )

interface pathlessLayoutDemosRouteChildren {
  pathlessLayoutDemosPathlessLayoutRoute: typeof pathlessLayoutDemosPathlessLayoutRouteWithChildren
}

const pathlessLayoutDemosRouteChildren: pathlessLayoutDemosRouteChildren = {
  pathlessLayoutDemosPathlessLayoutRoute:
    pathlessLayoutDemosPathlessLayoutRouteWithChildren,
}

const pathlessLayoutDemosRouteWithChildren =
  pathlessLayoutDemosRoute._addFileChildren(pathlessLayoutDemosRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof pathlessLayoutDemosPathlessLayoutRouteWithChildren
  '': typeof PathlessGroupRouteRouteWithChildren
  '/$': typeof SplatRoute
  '/dynamic': typeof dynamicDemosDynamicRouteRouteWithChildren
  '/sample': typeof PathlessGroupSampleRoute
  '/settings/theme': typeof SettingsThemeRoute
  '/settings': typeof SettingsIndexRoute
  '/dynamic/$id': typeof dynamicDemosDynamicIdRoute
  '/dynamic/unnest': typeof dynamicDemosDynamicUnnestRoute
  '/about': typeof pathlessLayoutDemosPathlessLayoutAboutRoute
  '/dynamic/': typeof dynamicDemosDynamicIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof pathlessLayoutDemosPathlessLayoutRouteWithChildren
  '': typeof PathlessGroupRouteRouteWithChildren
  '/$': typeof SplatRoute
  '/sample': typeof PathlessGroupSampleRoute
  '/settings/theme': typeof SettingsThemeRoute
  '/settings': typeof SettingsIndexRoute
  '/dynamic/$id': typeof dynamicDemosDynamicIdRoute
  '/dynamic/unnest': typeof dynamicDemosDynamicUnnestRoute
  '/about': typeof pathlessLayoutDemosPathlessLayoutAboutRoute
  '/dynamic': typeof dynamicDemosDynamicIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_pathlessGroup': typeof PathlessGroupRouteRouteWithChildren
  '/$': typeof SplatRoute
  '/(dynamicDemos)/dynamic': typeof dynamicDemosDynamicRouteRouteWithChildren
  '/(pathlessLayoutDemos)': typeof pathlessLayoutDemosRouteWithChildren
  '/(pathlessLayoutDemos)/_pathlessLayout': typeof pathlessLayoutDemosPathlessLayoutRouteWithChildren
  '/_pathlessGroup/sample': typeof PathlessGroupSampleRoute
  '/settings/theme': typeof SettingsThemeRoute
  '/settings/': typeof SettingsIndexRoute
  '/(dynamicDemos)/dynamic/$id': typeof dynamicDemosDynamicIdRoute
  '/(dynamicDemos)/dynamic_/unnest': typeof dynamicDemosDynamicUnnestRoute
  '/(pathlessLayoutDemos)/_pathlessLayout/about': typeof pathlessLayoutDemosPathlessLayoutAboutRoute
  '/(dynamicDemos)/dynamic/': typeof dynamicDemosDynamicIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/$'
    | '/dynamic'
    | '/sample'
    | '/settings/theme'
    | '/settings'
    | '/dynamic/$id'
    | '/dynamic/unnest'
    | '/about'
    | '/dynamic/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/$'
    | '/sample'
    | '/settings/theme'
    | '/settings'
    | '/dynamic/$id'
    | '/dynamic/unnest'
    | '/about'
    | '/dynamic'
  id:
    | '__root__'
    | '/'
    | '/_pathlessGroup'
    | '/$'
    | '/(dynamicDemos)/dynamic'
    | '/(pathlessLayoutDemos)'
    | '/(pathlessLayoutDemos)/_pathlessLayout'
    | '/_pathlessGroup/sample'
    | '/settings/theme'
    | '/settings/'
    | '/(dynamicDemos)/dynamic/$id'
    | '/(dynamicDemos)/dynamic_/unnest'
    | '/(pathlessLayoutDemos)/_pathlessLayout/about'
    | '/(dynamicDemos)/dynamic/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PathlessGroupRouteRoute: typeof PathlessGroupRouteRouteWithChildren
  SplatRoute: typeof SplatRoute
  dynamicDemosDynamicRouteRoute: typeof dynamicDemosDynamicRouteRouteWithChildren
  pathlessLayoutDemosRoute: typeof pathlessLayoutDemosRouteWithChildren
  SettingsThemeRoute: typeof SettingsThemeRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  dynamicDemosDynamicUnnestRoute: typeof dynamicDemosDynamicUnnestRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PathlessGroupRouteRoute: PathlessGroupRouteRouteWithChildren,
  SplatRoute: SplatRoute,
  dynamicDemosDynamicRouteRoute: dynamicDemosDynamicRouteRouteWithChildren,
  pathlessLayoutDemosRoute: pathlessLayoutDemosRouteWithChildren,
  SettingsThemeRoute: SettingsThemeRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  dynamicDemosDynamicUnnestRoute: dynamicDemosDynamicUnnestRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_pathlessGroup",
        "/$",
        "/(dynamicDemos)/dynamic",
        "/(pathlessLayoutDemos)",
        "/settings/theme",
        "/settings/",
        "/(dynamicDemos)/dynamic_/unnest"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_pathlessGroup": {
      "filePath": "_pathlessGroup/route.tsx",
      "children": [
        "/_pathlessGroup/sample"
      ]
    },
    "/$": {
      "filePath": "$.tsx"
    },
    "/(dynamicDemos)/dynamic": {
      "filePath": "(dynamicDemos)/dynamic/route.tsx",
      "children": [
        "/(dynamicDemos)/dynamic/$id",
        "/(dynamicDemos)/dynamic/"
      ]
    },
    "/(pathlessLayoutDemos)": {
      "filePath": "(pathlessLayoutDemos)",
      "children": [
        "/(pathlessLayoutDemos)/_pathlessLayout"
      ]
    },
    "/(pathlessLayoutDemos)/_pathlessLayout": {
      "filePath": "(pathlessLayoutDemos)/_pathlessLayout.tsx",
      "parent": "/(pathlessLayoutDemos)",
      "children": [
        "/(pathlessLayoutDemos)/_pathlessLayout/about"
      ]
    },
    "/_pathlessGroup/sample": {
      "filePath": "_pathlessGroup/sample.tsx",
      "parent": "/_pathlessGroup"
    },
    "/settings/theme": {
      "filePath": "settings/theme.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    },
    "/(dynamicDemos)/dynamic/$id": {
      "filePath": "(dynamicDemos)/dynamic/$id.tsx",
      "parent": "/(dynamicDemos)/dynamic"
    },
    "/(dynamicDemos)/dynamic_/unnest": {
      "filePath": "(dynamicDemos)/dynamic_.unnest.tsx"
    },
    "/(pathlessLayoutDemos)/_pathlessLayout/about": {
      "filePath": "(pathlessLayoutDemos)/_pathlessLayout.about.tsx",
      "parent": "/(pathlessLayoutDemos)/_pathlessLayout"
    },
    "/(dynamicDemos)/dynamic/": {
      "filePath": "(dynamicDemos)/dynamic/index.tsx",
      "parent": "/(dynamicDemos)/dynamic"
    }
  }
}
ROUTE_MANIFEST_END */
