/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SampleImport } from './routes/sample'
import { Route as AboutImport } from './routes/about'
import { Route as DynamicRouteImport } from './routes/dynamic/route'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as DynamicIndexImport } from './routes/dynamic/index'
import { Route as SettingsThemeImport } from './routes/settings/theme'
import { Route as DynamicIdImport } from './routes/dynamic/$id'

// Create/Update Routes

const SampleRoute = SampleImport.update({
  id: '/sample',
  path: '/sample',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const DynamicRouteRoute = DynamicRouteImport.update({
  id: '/dynamic',
  path: '/dynamic',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const DynamicIndexRoute = DynamicIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DynamicRouteRoute,
} as any)

const SettingsThemeRoute = SettingsThemeImport.update({
  id: '/settings/theme',
  path: '/settings/theme',
  getParentRoute: () => rootRoute,
} as any)

const DynamicIdRoute = DynamicIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => DynamicRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dynamic': {
      id: '/dynamic'
      path: '/dynamic'
      fullPath: '/dynamic'
      preLoaderRoute: typeof DynamicRouteImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/sample': {
      id: '/sample'
      path: '/sample'
      fullPath: '/sample'
      preLoaderRoute: typeof SampleImport
      parentRoute: typeof rootRoute
    }
    '/dynamic/$id': {
      id: '/dynamic/$id'
      path: '/$id'
      fullPath: '/dynamic/$id'
      preLoaderRoute: typeof DynamicIdImport
      parentRoute: typeof DynamicRouteImport
    }
    '/settings/theme': {
      id: '/settings/theme'
      path: '/settings/theme'
      fullPath: '/settings/theme'
      preLoaderRoute: typeof SettingsThemeImport
      parentRoute: typeof rootRoute
    }
    '/dynamic/': {
      id: '/dynamic/'
      path: '/'
      fullPath: '/dynamic/'
      preLoaderRoute: typeof DynamicIndexImport
      parentRoute: typeof DynamicRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface DynamicRouteRouteChildren {
  DynamicIdRoute: typeof DynamicIdRoute
  DynamicIndexRoute: typeof DynamicIndexRoute
}

const DynamicRouteRouteChildren: DynamicRouteRouteChildren = {
  DynamicIdRoute: DynamicIdRoute,
  DynamicIndexRoute: DynamicIndexRoute,
}

const DynamicRouteRouteWithChildren = DynamicRouteRoute._addFileChildren(
  DynamicRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dynamic': typeof DynamicRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/sample': typeof SampleRoute
  '/dynamic/$id': typeof DynamicIdRoute
  '/settings/theme': typeof SettingsThemeRoute
  '/dynamic/': typeof DynamicIndexRoute
  '/settings': typeof SettingsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/sample': typeof SampleRoute
  '/dynamic/$id': typeof DynamicIdRoute
  '/settings/theme': typeof SettingsThemeRoute
  '/dynamic': typeof DynamicIndexRoute
  '/settings': typeof SettingsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dynamic': typeof DynamicRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/sample': typeof SampleRoute
  '/dynamic/$id': typeof DynamicIdRoute
  '/settings/theme': typeof SettingsThemeRoute
  '/dynamic/': typeof DynamicIndexRoute
  '/settings/': typeof SettingsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dynamic'
    | '/about'
    | '/sample'
    | '/dynamic/$id'
    | '/settings/theme'
    | '/dynamic/'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/sample'
    | '/dynamic/$id'
    | '/settings/theme'
    | '/dynamic'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/dynamic'
    | '/about'
    | '/sample'
    | '/dynamic/$id'
    | '/settings/theme'
    | '/dynamic/'
    | '/settings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DynamicRouteRoute: typeof DynamicRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  SampleRoute: typeof SampleRoute
  SettingsThemeRoute: typeof SettingsThemeRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DynamicRouteRoute: DynamicRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  SampleRoute: SampleRoute,
  SettingsThemeRoute: SettingsThemeRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dynamic",
        "/about",
        "/sample",
        "/settings/theme",
        "/settings/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dynamic": {
      "filePath": "dynamic/route.tsx",
      "children": [
        "/dynamic/$id",
        "/dynamic/"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/sample": {
      "filePath": "sample.tsx"
    },
    "/dynamic/$id": {
      "filePath": "dynamic/$id.tsx",
      "parent": "/dynamic"
    },
    "/settings/theme": {
      "filePath": "settings/theme.tsx"
    },
    "/dynamic/": {
      "filePath": "dynamic/index.tsx",
      "parent": "/dynamic"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
