/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PathlessLayoutImport } from './routes/_pathlessLayout'
import { Route as DynamicRouteImport } from './routes/dynamic/route'
import { Route as PathlessGroupRouteImport } from './routes/_pathlessGroup/route'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as DynamicIndexImport } from './routes/dynamic/index'
import { Route as SettingsThemeImport } from './routes/settings/theme'
import { Route as DynamicUnnestImport } from './routes/dynamic_.unnest'
import { Route as DynamicIdImport } from './routes/dynamic/$id'
import { Route as PathlessLayoutAboutImport } from './routes/_pathlessLayout.about'
import { Route as PathlessGroupSampleImport } from './routes/_pathlessGroup/sample'

// Create/Update Routes

const PathlessLayoutRoute = PathlessLayoutImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRoute,
} as any)

const DynamicRouteRoute = DynamicRouteImport.update({
  id: '/dynamic',
  path: '/dynamic',
  getParentRoute: () => rootRoute,
} as any)

const PathlessGroupRouteRoute = PathlessGroupRouteImport.update({
  id: '/_pathlessGroup',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const DynamicIndexRoute = DynamicIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DynamicRouteRoute,
} as any)

const SettingsThemeRoute = SettingsThemeImport.update({
  id: '/settings/theme',
  path: '/settings/theme',
  getParentRoute: () => rootRoute,
} as any)

const DynamicUnnestRoute = DynamicUnnestImport.update({
  id: '/dynamic_/unnest',
  path: '/dynamic/unnest',
  getParentRoute: () => rootRoute,
} as any)

const DynamicIdRoute = DynamicIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => DynamicRouteRoute,
} as any)

const PathlessLayoutAboutRoute = PathlessLayoutAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => PathlessLayoutRoute,
} as any)

const PathlessGroupSampleRoute = PathlessGroupSampleImport.update({
  id: '/sample',
  path: '/sample',
  getParentRoute: () => PathlessGroupRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessGroup': {
      id: '/_pathlessGroup'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessGroupRouteImport
      parentRoute: typeof rootRoute
    }
    '/dynamic': {
      id: '/dynamic'
      path: '/dynamic'
      fullPath: '/dynamic'
      preLoaderRoute: typeof DynamicRouteImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessGroup/sample': {
      id: '/_pathlessGroup/sample'
      path: '/sample'
      fullPath: '/sample'
      preLoaderRoute: typeof PathlessGroupSampleImport
      parentRoute: typeof PathlessGroupRouteImport
    }
    '/_pathlessLayout/about': {
      id: '/_pathlessLayout/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof PathlessLayoutAboutImport
      parentRoute: typeof PathlessLayoutImport
    }
    '/dynamic/$id': {
      id: '/dynamic/$id'
      path: '/$id'
      fullPath: '/dynamic/$id'
      preLoaderRoute: typeof DynamicIdImport
      parentRoute: typeof DynamicRouteImport
    }
    '/dynamic_/unnest': {
      id: '/dynamic_/unnest'
      path: '/dynamic/unnest'
      fullPath: '/dynamic/unnest'
      preLoaderRoute: typeof DynamicUnnestImport
      parentRoute: typeof rootRoute
    }
    '/settings/theme': {
      id: '/settings/theme'
      path: '/settings/theme'
      fullPath: '/settings/theme'
      preLoaderRoute: typeof SettingsThemeImport
      parentRoute: typeof rootRoute
    }
    '/dynamic/': {
      id: '/dynamic/'
      path: '/'
      fullPath: '/dynamic/'
      preLoaderRoute: typeof DynamicIndexImport
      parentRoute: typeof DynamicRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface PathlessGroupRouteRouteChildren {
  PathlessGroupSampleRoute: typeof PathlessGroupSampleRoute
}

const PathlessGroupRouteRouteChildren: PathlessGroupRouteRouteChildren = {
  PathlessGroupSampleRoute: PathlessGroupSampleRoute,
}

const PathlessGroupRouteRouteWithChildren =
  PathlessGroupRouteRoute._addFileChildren(PathlessGroupRouteRouteChildren)

interface DynamicRouteRouteChildren {
  DynamicIdRoute: typeof DynamicIdRoute
  DynamicIndexRoute: typeof DynamicIndexRoute
}

const DynamicRouteRouteChildren: DynamicRouteRouteChildren = {
  DynamicIdRoute: DynamicIdRoute,
  DynamicIndexRoute: DynamicIndexRoute,
}

const DynamicRouteRouteWithChildren = DynamicRouteRoute._addFileChildren(
  DynamicRouteRouteChildren,
)

interface PathlessLayoutRouteChildren {
  PathlessLayoutAboutRoute: typeof PathlessLayoutAboutRoute
}

const PathlessLayoutRouteChildren: PathlessLayoutRouteChildren = {
  PathlessLayoutAboutRoute: PathlessLayoutAboutRoute,
}

const PathlessLayoutRouteWithChildren = PathlessLayoutRoute._addFileChildren(
  PathlessLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PathlessLayoutRouteWithChildren
  '/dynamic': typeof DynamicRouteRouteWithChildren
  '/sample': typeof PathlessGroupSampleRoute
  '/about': typeof PathlessLayoutAboutRoute
  '/dynamic/$id': typeof DynamicIdRoute
  '/dynamic/unnest': typeof DynamicUnnestRoute
  '/settings/theme': typeof SettingsThemeRoute
  '/dynamic/': typeof DynamicIndexRoute
  '/settings': typeof SettingsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PathlessLayoutRouteWithChildren
  '/sample': typeof PathlessGroupSampleRoute
  '/about': typeof PathlessLayoutAboutRoute
  '/dynamic/$id': typeof DynamicIdRoute
  '/dynamic/unnest': typeof DynamicUnnestRoute
  '/settings/theme': typeof SettingsThemeRoute
  '/dynamic': typeof DynamicIndexRoute
  '/settings': typeof SettingsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_pathlessGroup': typeof PathlessGroupRouteRouteWithChildren
  '/dynamic': typeof DynamicRouteRouteWithChildren
  '/_pathlessLayout': typeof PathlessLayoutRouteWithChildren
  '/_pathlessGroup/sample': typeof PathlessGroupSampleRoute
  '/_pathlessLayout/about': typeof PathlessLayoutAboutRoute
  '/dynamic/$id': typeof DynamicIdRoute
  '/dynamic_/unnest': typeof DynamicUnnestRoute
  '/settings/theme': typeof SettingsThemeRoute
  '/dynamic/': typeof DynamicIndexRoute
  '/settings/': typeof SettingsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/dynamic'
    | '/sample'
    | '/about'
    | '/dynamic/$id'
    | '/dynamic/unnest'
    | '/settings/theme'
    | '/dynamic/'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/sample'
    | '/about'
    | '/dynamic/$id'
    | '/dynamic/unnest'
    | '/settings/theme'
    | '/dynamic'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/_pathlessGroup'
    | '/dynamic'
    | '/_pathlessLayout'
    | '/_pathlessGroup/sample'
    | '/_pathlessLayout/about'
    | '/dynamic/$id'
    | '/dynamic_/unnest'
    | '/settings/theme'
    | '/dynamic/'
    | '/settings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PathlessGroupRouteRoute: typeof PathlessGroupRouteRouteWithChildren
  DynamicRouteRoute: typeof DynamicRouteRouteWithChildren
  PathlessLayoutRoute: typeof PathlessLayoutRouteWithChildren
  DynamicUnnestRoute: typeof DynamicUnnestRoute
  SettingsThemeRoute: typeof SettingsThemeRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PathlessGroupRouteRoute: PathlessGroupRouteRouteWithChildren,
  DynamicRouteRoute: DynamicRouteRouteWithChildren,
  PathlessLayoutRoute: PathlessLayoutRouteWithChildren,
  DynamicUnnestRoute: DynamicUnnestRoute,
  SettingsThemeRoute: SettingsThemeRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_pathlessGroup",
        "/dynamic",
        "/_pathlessLayout",
        "/dynamic_/unnest",
        "/settings/theme",
        "/settings/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_pathlessGroup": {
      "filePath": "_pathlessGroup/route.tsx",
      "children": [
        "/_pathlessGroup/sample"
      ]
    },
    "/dynamic": {
      "filePath": "dynamic/route.tsx",
      "children": [
        "/dynamic/$id",
        "/dynamic/"
      ]
    },
    "/_pathlessLayout": {
      "filePath": "_pathlessLayout.tsx",
      "children": [
        "/_pathlessLayout/about"
      ]
    },
    "/_pathlessGroup/sample": {
      "filePath": "_pathlessGroup/sample.tsx",
      "parent": "/_pathlessGroup"
    },
    "/_pathlessLayout/about": {
      "filePath": "_pathlessLayout.about.tsx",
      "parent": "/_pathlessLayout"
    },
    "/dynamic/$id": {
      "filePath": "dynamic/$id.tsx",
      "parent": "/dynamic"
    },
    "/dynamic_/unnest": {
      "filePath": "dynamic_.unnest.tsx"
    },
    "/settings/theme": {
      "filePath": "settings/theme.tsx"
    },
    "/dynamic/": {
      "filePath": "dynamic/index.tsx",
      "parent": "/dynamic"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
